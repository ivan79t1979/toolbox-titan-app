'use server';

/**
 * @fileOverview An AI writing assistant to generate high-quality text.
 *
 * - aiWritingAssistant - A function that handles the text generation process.
 * - AiWritingAssistantInput - The input type for the aiWritingAssistant function.
 * - AiWritingAssistantOutput - The return type for the aiWritingAssistant function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiWritingAssistantInputSchema = z.object({
  topic: z.string().describe('The topic or subject for the AI to write about.'),
  style: z.string().describe('The writing style to use (e.g., formal, informal, persuasive).'),
  length: z.string().describe('The desired length of the text (e.g., short, medium, long).'),
  keywords: z.string().optional().describe('Optional keywords to guide the AI.'),
});
export type AiWritingAssistantInput = z.infer<typeof AiWritingAssistantInputSchema>;

const AiWritingAssistantOutputSchema = z.object({
  generatedText: z.string().describe('The text generated by the AI writing assistant.'),
});
export type AiWritingAssistantOutput = z.infer<typeof AiWritingAssistantOutputSchema>;

export async function aiWritingAssistant(input: AiWritingAssistantInput): Promise<AiWritingAssistantOutput> {
  return aiWritingAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiWritingAssistantPrompt',
  input: {schema: AiWritingAssistantInputSchema},
  output: {schema: AiWritingAssistantOutputSchema},
  prompt: `You are a helpful AI writing assistant. Generate text based on the provided topic, style, length, and keywords.

Topic: {{{topic}}}
Style: {{{style}}}
Length: {{{length}}}
Keywords: {{{keywords}}}

Generated Text:`, // Removed the 'Assistant:' prefix
});

const aiWritingAssistantFlow = ai.defineFlow(
  {
    name: 'aiWritingAssistantFlow',
    inputSchema: AiWritingAssistantInputSchema,
    outputSchema: AiWritingAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
